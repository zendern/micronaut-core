/**
 * To use this when setting up Travis run the following commands to encrypt
 * the necessary environment variables for publishing to work
 *
 * $ travis encrypt SIGNING_PASSPHRASE=...
 * $ travis encrypt SONATYPE_USERNAME=...
 * $ travis encrypt SONATYPE_PASSWORD=...
 * $ travis encrypt ARTIFACTORY_USERNAME=...
 * $ travis encrypt ARTIFACTORY_PASSWORD=...
 * $ travis encrypt BINTRAY_USER=...
 * $ travis encrypt BINTRAY_KEY=...
 *
 */

buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
    }
}


import groovyx.net.http.RESTClient
import static groovyx.net.http.ContentType.*

apply plugin: 'maven-publish'
//apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.bmuschko.nexus'

publishing {
    repositories {
        maven {
            credentials {
                def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
                def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''

                username = ossUser
                password = ossPass
            }
            if(isBuildSnapshot) {
                url  "https://oss.sonatype.org/content/repositories/snapshots"
            }
            else {
                url "https://repo.micronaut.io/artifactory/libs-releases-local"
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId "micronaut-${project.name}"
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = project.title
                description = project.projectDesc
                url = projectUrl
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                scm {
                    url = "scm:git@github.com:${githubSlug}.git"
                    connection = "scm:git@github.com:${githubSlug}.git"
                    developerConnection = "scm:git@github.com:${githubSlug}.git"
                }
                if(project.developers) {
                    developers {
                        for(dev in project.developers.split(',')) {
                            developer {
                                id = dev.toLowerCase().replace(' ', '').toString()
                                name = dev.toString()
                            }
                        }
                    }
                }
            }

        }
    }
}

def bintrayUser = System.getenv("BINTRAY_USER") ?: project.hasProperty("bintrayUser") ? project.bintrayUser : ''
def bintrayKey = System.getenv("BINTRAY_KEY") ?: project.hasProperty("bintrayKey") ? project.bintrayKey : ''
def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''

//bintray {
//
//    user = bintrayUser
//    key = bintrayKey
//    publications = ['maven']
//    publish = false
//    pkg {
//        repo = 'core-releases-local'
//        userOrg = 'micronaut'
//        name = project.name
//        desc = "${project.title} - ${project.projectDesc} - ${project.name} module".toString()
//        websiteUrl = projectUrl
//        issueTrackerUrl = "https://github.com/$githubSlug/issues"
//        vcsUrl = "https://github.com/$githubSlug"
//        licenses = ['Apache-2.0']
//        publicDownloadNumbers = true
//        version {
//            name = project.version
//            gpg {
//                sign = true
//                passphrase = System.getenv("SIGNING_PASSPHRASE") ?: project.hasProperty("signingPassphrase") ? project.signingPassphrase : ''
//            }
//            mavenCentralSync {
//                sync = project.hasProperty("mavenCentralSync") ? project.mavenCentralSync.toBoolean() : false
//                user = ossUser
//                password = ossPass
//            }
//
//        }
//    }
//}

task synchronizeWithMavenCentral() {
    description = "Syncs with Maven Central/Sonatype"
    doLast {
        println """
Synchronizing with Maven central. This may take a few minutes ...
If this fails, log on to http://oss.sonatype.org/ using the centralUser credentials
and progress through process manually -> Close -> Publish ... under staging repositories
"""
        List<String> versions = [projectVersion]

        for(v in versions) {
            try {
                try {
                    def mavenClent = new RESTClient("https://repo.maven.apache.org/maven2/")
                    mavenClent.get(path:"${project.group.replace('.','/')}/micronaut-$project.name/$v/micronaut-$project.name-${v}.jar")
                } catch(groovyx.net.http.HttpResponseException e) {
                    // doesn't exist.. try sync
                    def client = new RESTClient('https://api.bintray.com/maven_central_sync/micronaut/core-releases-local/')
                    client.headers['Authorization'] = 'Basic ' + "$bintrayUser:$bintrayKey".getBytes('iso-8859-1').encodeBase64()
                    def body = /{}/
                    def resp = client.post(
                            path: "$bintray.pkg.name/versions/$v",
                            body: body,
                            requestContentType: JSON
                    )
                    assert resp.status == 200
                    println resp.data.status
                    println resp.data.messages.join('\n')
                }
            } catch (groovyx.net.http.HttpResponseException e) {
                println "Error: $e"
                println "Message: $e.message"
                println "Body: $e.response.data"
                throw e
            }
        }

    }
}

def fetch(addr, params = [:]) {
    def auth = "<personal api token>"
    def json = new groovy.json.JsonSlurper()
    return json.parse(addr.toURL().newReader(requestProperties: ["Authorization": "token ${System.getenv("GH_TOKEN")}".toString(), "Accept": "application/json"]))
}